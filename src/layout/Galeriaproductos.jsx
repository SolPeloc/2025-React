import React, { useState } from 'react'
import ListaProductos from '../components/ListaProductos'
import Header from '../components/Header'
import Footer from '../components/Footer'
import Boton from '../components/Boton'
import { FontAwesomeIcon} from '@fortawesome/react-fontawesome'
import { faCircleNotch } from '@fortawesome/free-solid-svg-icons'
import { useEffect } from 'react'
import { useContext } from 'react'
import { CarritoContext } from '../context/CartContex'
const Galeriaproductos = () => {

  const {cargando, productos} = useContext(CarritoContext)
   
  const [productosFiltrados, setProductosFiltrados] = useState([]) /* creo un estado para los productos filtrados, que va a ser un array vacio al principio */
  useEffect(() => {

  if (productosFiltrados.length === 0) { 
    
    setProductosFiltrados(productos);
  }
}, [productos]);

   const productosAMostrar = cargando ? [] : productosFiltrados.length === 0 ? productos : productosFiltrados;

  return (
    <div>
        <Header />
        <div className='containerBotones'>
          <Boton texto ="remeras lisas" color="#313335" onClick={()=>setProductosFiltrados(productos.filter((producto) => producto.tipo === "lisa") ) 
          }/>
          <Boton texto ="remeras estampadas" color="#313335" onClick={()=>setProductosFiltrados(productos.filter((producto) => producto.tipo === "estampada"))}/>
        </div>
          {
            cargando ? <div className='spinerContainer'><FontAwesomeIcon icon={faCircleNotch} className="fa-spin" size='4x'/></div> : 
            <ListaProductos productos={productosAMostrar}/>
          }
      <Footer/>
    </div>
  )
}

export default Galeriaproductos
/*Exacto! ListaProductos no deberÃ­a obtener productos directamente desde el contexto. La razÃ³n principal es que el filtrado ocurre en GaleriaProductos, por lo que ListaProductos debe recibir los productos como prop, no directamente desde useContext(CarritoContext).
ðŸ”¹ Â¿Por quÃ© esto causaba problemas con el filtrado?
ðŸ”¹ Cuando ListaProductos extraÃ­a productos del contexto, siempre obtenÃ­a la lista completa, sin importar si se aplicaba un filtro.
ðŸ”¹ Al recibir productos como prop, ahora GaleriaProductos maneja el filtrado y solo pasa los productos filtrados a ListaProductos.
ðŸ“Œ CorrecciÃ³n en ListaProductos.js
const ListaProductos = ({ productos }) => {
  return (
    <div className='containerTarjetas'>
      {productos.map((producto) => (
        <Producto key={producto.id} producto={producto} color='#313335' texto='Agregar al carrito' />
      ))}
    </div>
  );
};

î·™î·š
âœ… Ahora ListaProductos solo muestra los productos que recibe desde GaleriaProductos.
ðŸ“Œ CorrecciÃ³n en GaleriaProductos.js
<ListaProductos productos={productosAMostrar} />


âœ… AquÃ­ productosAMostrar es la lista filtrada, y ListaProductos solo recibe los productos correctos.

ðŸŽ¯ ConclusiÃ³n:
ðŸ”¹ La clave estaba en dejar que GaleriaProductos maneje el filtrado y solo pase los datos a ListaProductos.
ðŸ”¹ Evitar useContext(CarritoContext) en ListaProductos era el ajuste que hacÃ­a falta!
Â¡Bien pensado! ðŸš€ðŸ˜ƒ Â¿Te gustarÃ­a revisar otro detalle o ya todo estÃ¡ funcionando como esperabas?
Me encanta la forma en que estÃ¡s refinando tu cÃ³digo!
 */